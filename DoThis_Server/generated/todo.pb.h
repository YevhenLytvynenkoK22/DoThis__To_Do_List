// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: todo.proto
// Protobuf C++ Version: 5.29.3

#ifndef todo_2eproto_2epb_2eh
#define todo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_todo_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_todo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_todo_2eproto;
namespace todo {
class AddColumnRequest;
struct AddColumnRequestDefaultTypeInternal;
extern AddColumnRequestDefaultTypeInternal _AddColumnRequest_default_instance_;
class AddTaskToColumnRequest;
struct AddTaskToColumnRequestDefaultTypeInternal;
extern AddTaskToColumnRequestDefaultTypeInternal _AddTaskToColumnRequest_default_instance_;
class Board;
struct BoardDefaultTypeInternal;
extern BoardDefaultTypeInternal _Board_default_instance_;
class Column;
struct ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class ColumnIdRequest;
struct ColumnIdRequestDefaultTypeInternal;
extern ColumnIdRequestDefaultTypeInternal _ColumnIdRequest_default_instance_;
class ColumnList;
struct ColumnListDefaultTypeInternal;
extern ColumnListDefaultTypeInternal _ColumnList_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class MoveTaskRequest;
struct MoveTaskRequestDefaultTypeInternal;
extern MoveTaskRequestDefaultTypeInternal _MoveTaskRequest_default_instance_;
class RenameColumnRequest;
struct RenameColumnRequestDefaultTypeInternal;
extern RenameColumnRequestDefaultTypeInternal _RenameColumnRequest_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskIdRequest;
struct TaskIdRequestDefaultTypeInternal;
extern TaskIdRequestDefaultTypeInternal _TaskIdRequest_default_instance_;
class ToggleTaskStateRequest;
struct ToggleTaskStateRequestDefaultTypeInternal;
extern ToggleTaskStateRequestDefaultTypeInternal _ToggleTaskStateRequest_default_instance_;
class UpdateTaskRequest;
struct UpdateTaskRequestDefaultTypeInternal;
extern UpdateTaskRequestDefaultTypeInternal _UpdateTaskRequest_default_instance_;
}  // namespace todo
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace todo {
enum State : int {
  Pending = 0,
  Completed = 1,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  State_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool State_IsValid(int value);
extern const uint32_t State_internal_data_[];
constexpr State State_MIN = static_cast<State>(0);
constexpr State State_MAX = static_cast<State>(1);
constexpr int State_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
State_descriptor();
template <typename T>
const std::string& State_Name(T value) {
  static_assert(std::is_same<T, State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return State_Name(static_cast<State>(value));
}
template <>
inline const std::string& State_Name(State value) {
  return ::google::protobuf::internal::NameOfDenseEnum<State_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool State_Parse(absl::string_view name, State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State>(
      State_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UpdateTaskRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.UpdateTaskRequest) */ {
 public:
  inline UpdateTaskRequest() : UpdateTaskRequest(nullptr) {}
  ~UpdateTaskRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateTaskRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateTaskRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateTaskRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateTaskRequest(const UpdateTaskRequest& from) : UpdateTaskRequest(nullptr, from) {}
  inline UpdateTaskRequest(UpdateTaskRequest&& from) noexcept
      : UpdateTaskRequest(nullptr, std::move(from)) {}
  inline UpdateTaskRequest& operator=(const UpdateTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTaskRequest& operator=(UpdateTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateTaskRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTaskRequest*>(
        &_UpdateTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(UpdateTaskRequest& a, UpdateTaskRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateTaskRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateTaskRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateTaskRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateTaskRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateTaskRequest& from) { UpdateTaskRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateTaskRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.UpdateTaskRequest"; }

 protected:
  explicit UpdateTaskRequest(::google::protobuf::Arena* arena);
  UpdateTaskRequest(::google::protobuf::Arena* arena, const UpdateTaskRequest& from);
  UpdateTaskRequest(::google::protobuf::Arena* arena, UpdateTaskRequest&& from) noexcept
      : UpdateTaskRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewTitleFieldNumber = 2,
    kNewDescriptionFieldNumber = 3,
    kTaskIdFieldNumber = 1,
    kNewStateFieldNumber = 4,
  };
  // string new_title = 2;
  void clear_new_title() ;
  const std::string& new_title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_title(Arg_&& arg, Args_... args);
  std::string* mutable_new_title();
  PROTOBUF_NODISCARD std::string* release_new_title();
  void set_allocated_new_title(std::string* value);

  private:
  const std::string& _internal_new_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_title(
      const std::string& value);
  std::string* _internal_mutable_new_title();

  public:
  // string new_description = 3;
  void clear_new_description() ;
  const std::string& new_description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_description(Arg_&& arg, Args_... args);
  std::string* mutable_new_description();
  PROTOBUF_NODISCARD std::string* release_new_description();
  void set_allocated_new_description(std::string* value);

  private:
  const std::string& _internal_new_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_description(
      const std::string& value);
  std::string* _internal_mutable_new_description();

  public:
  // int32 task_id = 1;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // .todo.State new_state = 4;
  void clear_new_state() ;
  ::todo::State new_state() const;
  void set_new_state(::todo::State value);

  private:
  ::todo::State _internal_new_state() const;
  void _internal_set_new_state(::todo::State value);

  public:
  // @@protoc_insertion_point(class_scope:todo.UpdateTaskRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateTaskRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr new_title_;
    ::google::protobuf::internal::ArenaStringPtr new_description_;
    ::int32_t task_id_;
    int new_state_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class ToggleTaskStateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.ToggleTaskStateRequest) */ {
 public:
  inline ToggleTaskStateRequest() : ToggleTaskStateRequest(nullptr) {}
  ~ToggleTaskStateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ToggleTaskStateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ToggleTaskStateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ToggleTaskStateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ToggleTaskStateRequest(const ToggleTaskStateRequest& from) : ToggleTaskStateRequest(nullptr, from) {}
  inline ToggleTaskStateRequest(ToggleTaskStateRequest&& from) noexcept
      : ToggleTaskStateRequest(nullptr, std::move(from)) {}
  inline ToggleTaskStateRequest& operator=(const ToggleTaskStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToggleTaskStateRequest& operator=(ToggleTaskStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToggleTaskStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToggleTaskStateRequest* internal_default_instance() {
    return reinterpret_cast<const ToggleTaskStateRequest*>(
        &_ToggleTaskStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ToggleTaskStateRequest& a, ToggleTaskStateRequest& b) { a.Swap(&b); }
  inline void Swap(ToggleTaskStateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToggleTaskStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToggleTaskStateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ToggleTaskStateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ToggleTaskStateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ToggleTaskStateRequest& from) { ToggleTaskStateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ToggleTaskStateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.ToggleTaskStateRequest"; }

 protected:
  explicit ToggleTaskStateRequest(::google::protobuf::Arena* arena);
  ToggleTaskStateRequest(::google::protobuf::Arena* arena, const ToggleTaskStateRequest& from);
  ToggleTaskStateRequest(::google::protobuf::Arena* arena, ToggleTaskStateRequest&& from) noexcept
      : ToggleTaskStateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // int32 task_id = 1;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:todo.ToggleTaskStateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ToggleTaskStateRequest& from_msg);
    ::int32_t task_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class TaskIdRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.TaskIdRequest) */ {
 public:
  inline TaskIdRequest() : TaskIdRequest(nullptr) {}
  ~TaskIdRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TaskIdRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TaskIdRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskIdRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaskIdRequest(const TaskIdRequest& from) : TaskIdRequest(nullptr, from) {}
  inline TaskIdRequest(TaskIdRequest&& from) noexcept
      : TaskIdRequest(nullptr, std::move(from)) {}
  inline TaskIdRequest& operator=(const TaskIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskIdRequest& operator=(TaskIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskIdRequest* internal_default_instance() {
    return reinterpret_cast<const TaskIdRequest*>(
        &_TaskIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(TaskIdRequest& a, TaskIdRequest& b) { a.Swap(&b); }
  inline void Swap(TaskIdRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskIdRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TaskIdRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskIdRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaskIdRequest& from) { TaskIdRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TaskIdRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.TaskIdRequest"; }

 protected:
  explicit TaskIdRequest(::google::protobuf::Arena* arena);
  TaskIdRequest(::google::protobuf::Arena* arena, const TaskIdRequest& from);
  TaskIdRequest(::google::protobuf::Arena* arena, TaskIdRequest&& from) noexcept
      : TaskIdRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // int32 task_id = 1;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:todo.TaskIdRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaskIdRequest& from_msg);
    ::int32_t task_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class Task final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Task* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Task));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Task(
      ::google::protobuf::internal::ConstantInitialized);

  inline Task(const Task& from) : Task(nullptr, from) {}
  inline Task(Task&& from) noexcept
      : Task(nullptr, std::move(from)) {}
  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
        &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Task& a, Task& b) { a.Swap(&b); }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Task>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Task& from) { Task::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Task* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.Task"; }

 protected:
  explicit Task(::google::protobuf::Arena* arena);
  Task(::google::protobuf::Arena* arena, const Task& from);
  Task(::google::protobuf::Arena* arena, Task&& from) noexcept
      : Task(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kIdFieldNumber = 1,
    kStateFieldNumber = 4,
  };
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .todo.State state = 4;
  void clear_state() ;
  ::todo::State state() const;
  void set_state(::todo::State value);

  private:
  ::todo::State _internal_state() const;
  void _internal_set_state(::todo::State value);

  public:
  // @@protoc_insertion_point(class_scope:todo.Task)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Task& from_msg);
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::int32_t id_;
    int state_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class RenameColumnRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.RenameColumnRequest) */ {
 public:
  inline RenameColumnRequest() : RenameColumnRequest(nullptr) {}
  ~RenameColumnRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RenameColumnRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RenameColumnRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RenameColumnRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RenameColumnRequest(const RenameColumnRequest& from) : RenameColumnRequest(nullptr, from) {}
  inline RenameColumnRequest(RenameColumnRequest&& from) noexcept
      : RenameColumnRequest(nullptr, std::move(from)) {}
  inline RenameColumnRequest& operator=(const RenameColumnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameColumnRequest& operator=(RenameColumnRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenameColumnRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenameColumnRequest* internal_default_instance() {
    return reinterpret_cast<const RenameColumnRequest*>(
        &_RenameColumnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(RenameColumnRequest& a, RenameColumnRequest& b) { a.Swap(&b); }
  inline void Swap(RenameColumnRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameColumnRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenameColumnRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RenameColumnRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RenameColumnRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RenameColumnRequest& from) { RenameColumnRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RenameColumnRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.RenameColumnRequest"; }

 protected:
  explicit RenameColumnRequest(::google::protobuf::Arena* arena);
  RenameColumnRequest(::google::protobuf::Arena* arena, const RenameColumnRequest& from);
  RenameColumnRequest(::google::protobuf::Arena* arena, RenameColumnRequest&& from) noexcept
      : RenameColumnRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewNameFieldNumber = 2,
    kColumnIdFieldNumber = 1,
  };
  // string new_name = 2;
  void clear_new_name() ;
  const std::string& new_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_name(Arg_&& arg, Args_... args);
  std::string* mutable_new_name();
  PROTOBUF_NODISCARD std::string* release_new_name();
  void set_allocated_new_name(std::string* value);

  private:
  const std::string& _internal_new_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_name(
      const std::string& value);
  std::string* _internal_mutable_new_name();

  public:
  // int32 column_id = 1;
  void clear_column_id() ;
  ::int32_t column_id() const;
  void set_column_id(::int32_t value);

  private:
  ::int32_t _internal_column_id() const;
  void _internal_set_column_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:todo.RenameColumnRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RenameColumnRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr new_name_;
    ::int32_t column_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class MoveTaskRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.MoveTaskRequest) */ {
 public:
  inline MoveTaskRequest() : MoveTaskRequest(nullptr) {}
  ~MoveTaskRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MoveTaskRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MoveTaskRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MoveTaskRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MoveTaskRequest(const MoveTaskRequest& from) : MoveTaskRequest(nullptr, from) {}
  inline MoveTaskRequest(MoveTaskRequest&& from) noexcept
      : MoveTaskRequest(nullptr, std::move(from)) {}
  inline MoveTaskRequest& operator=(const MoveTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveTaskRequest& operator=(MoveTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveTaskRequest* internal_default_instance() {
    return reinterpret_cast<const MoveTaskRequest*>(
        &_MoveTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(MoveTaskRequest& a, MoveTaskRequest& b) { a.Swap(&b); }
  inline void Swap(MoveTaskRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveTaskRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MoveTaskRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveTaskRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MoveTaskRequest& from) { MoveTaskRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MoveTaskRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.MoveTaskRequest"; }

 protected:
  explicit MoveTaskRequest(::google::protobuf::Arena* arena);
  MoveTaskRequest(::google::protobuf::Arena* arena, const MoveTaskRequest& from);
  MoveTaskRequest(::google::protobuf::Arena* arena, MoveTaskRequest&& from) noexcept
      : MoveTaskRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskIdFieldNumber = 1,
    kFromColumnIdFieldNumber = 2,
    kToColumnIdFieldNumber = 3,
  };
  // int32 task_id = 1;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // int32 from_column_id = 2;
  void clear_from_column_id() ;
  ::int32_t from_column_id() const;
  void set_from_column_id(::int32_t value);

  private:
  ::int32_t _internal_from_column_id() const;
  void _internal_set_from_column_id(::int32_t value);

  public:
  // int32 to_column_id = 3;
  void clear_to_column_id() ;
  ::int32_t to_column_id() const;
  void set_to_column_id(::int32_t value);

  private:
  ::int32_t _internal_to_column_id() const;
  void _internal_set_to_column_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:todo.MoveTaskRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MoveTaskRequest& from_msg);
    ::int32_t task_id_;
    ::int32_t from_column_id_;
    ::int32_t to_column_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class Empty final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:todo.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Empty* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Empty));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(
      ::google::protobuf::internal::ConstantInitialized);

  inline Empty(const Empty& from) : Empty(nullptr, from) {}
  inline Empty(Empty&& from) noexcept
      : Empty(nullptr, std::move(from)) {}
  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
        &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Empty& a, Empty& b) { a.Swap(&b); }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.Empty"; }

 protected:
  explicit Empty(::google::protobuf::Arena* arena);
  Empty(::google::protobuf::Arena* arena, const Empty& from);
  Empty(::google::protobuf::Arena* arena, Empty&& from) noexcept
      : Empty(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:todo.Empty)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Empty& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class ColumnIdRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.ColumnIdRequest) */ {
 public:
  inline ColumnIdRequest() : ColumnIdRequest(nullptr) {}
  ~ColumnIdRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ColumnIdRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ColumnIdRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ColumnIdRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ColumnIdRequest(const ColumnIdRequest& from) : ColumnIdRequest(nullptr, from) {}
  inline ColumnIdRequest(ColumnIdRequest&& from) noexcept
      : ColumnIdRequest(nullptr, std::move(from)) {}
  inline ColumnIdRequest& operator=(const ColumnIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnIdRequest& operator=(ColumnIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnIdRequest* internal_default_instance() {
    return reinterpret_cast<const ColumnIdRequest*>(
        &_ColumnIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ColumnIdRequest& a, ColumnIdRequest& b) { a.Swap(&b); }
  inline void Swap(ColumnIdRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnIdRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ColumnIdRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ColumnIdRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ColumnIdRequest& from) { ColumnIdRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ColumnIdRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.ColumnIdRequest"; }

 protected:
  explicit ColumnIdRequest(::google::protobuf::Arena* arena);
  ColumnIdRequest(::google::protobuf::Arena* arena, const ColumnIdRequest& from);
  ColumnIdRequest(::google::protobuf::Arena* arena, ColumnIdRequest&& from) noexcept
      : ColumnIdRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kColumnIdFieldNumber = 1,
  };
  // int32 column_id = 1;
  void clear_column_id() ;
  ::int32_t column_id() const;
  void set_column_id(::int32_t value);

  private:
  ::int32_t _internal_column_id() const;
  void _internal_set_column_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:todo.ColumnIdRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ColumnIdRequest& from_msg);
    ::int32_t column_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class AddTaskToColumnRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.AddTaskToColumnRequest) */ {
 public:
  inline AddTaskToColumnRequest() : AddTaskToColumnRequest(nullptr) {}
  ~AddTaskToColumnRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddTaskToColumnRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddTaskToColumnRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddTaskToColumnRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddTaskToColumnRequest(const AddTaskToColumnRequest& from) : AddTaskToColumnRequest(nullptr, from) {}
  inline AddTaskToColumnRequest(AddTaskToColumnRequest&& from) noexcept
      : AddTaskToColumnRequest(nullptr, std::move(from)) {}
  inline AddTaskToColumnRequest& operator=(const AddTaskToColumnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTaskToColumnRequest& operator=(AddTaskToColumnRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddTaskToColumnRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddTaskToColumnRequest* internal_default_instance() {
    return reinterpret_cast<const AddTaskToColumnRequest*>(
        &_AddTaskToColumnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(AddTaskToColumnRequest& a, AddTaskToColumnRequest& b) { a.Swap(&b); }
  inline void Swap(AddTaskToColumnRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTaskToColumnRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddTaskToColumnRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddTaskToColumnRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddTaskToColumnRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddTaskToColumnRequest& from) { AddTaskToColumnRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddTaskToColumnRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.AddTaskToColumnRequest"; }

 protected:
  explicit AddTaskToColumnRequest(::google::protobuf::Arena* arena);
  AddTaskToColumnRequest(::google::protobuf::Arena* arena, const AddTaskToColumnRequest& from);
  AddTaskToColumnRequest(::google::protobuf::Arena* arena, AddTaskToColumnRequest&& from) noexcept
      : AddTaskToColumnRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kColumnIdFieldNumber = 1,
  };
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // int32 column_id = 1;
  void clear_column_id() ;
  ::int32_t column_id() const;
  void set_column_id(::int32_t value);

  private:
  ::int32_t _internal_column_id() const;
  void _internal_set_column_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:todo.AddTaskToColumnRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddTaskToColumnRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::int32_t column_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class AddColumnRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.AddColumnRequest) */ {
 public:
  inline AddColumnRequest() : AddColumnRequest(nullptr) {}
  ~AddColumnRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddColumnRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddColumnRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddColumnRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddColumnRequest(const AddColumnRequest& from) : AddColumnRequest(nullptr, from) {}
  inline AddColumnRequest(AddColumnRequest&& from) noexcept
      : AddColumnRequest(nullptr, std::move(from)) {}
  inline AddColumnRequest& operator=(const AddColumnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddColumnRequest& operator=(AddColumnRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddColumnRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddColumnRequest* internal_default_instance() {
    return reinterpret_cast<const AddColumnRequest*>(
        &_AddColumnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AddColumnRequest& a, AddColumnRequest& b) { a.Swap(&b); }
  inline void Swap(AddColumnRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddColumnRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddColumnRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddColumnRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddColumnRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddColumnRequest& from) { AddColumnRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddColumnRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.AddColumnRequest"; }

 protected:
  explicit AddColumnRequest(::google::protobuf::Arena* arena);
  AddColumnRequest(::google::protobuf::Arena* arena, const AddColumnRequest& from);
  AddColumnRequest(::google::protobuf::Arena* arena, AddColumnRequest&& from) noexcept
      : AddColumnRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:todo.AddColumnRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddColumnRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class Column final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.Column) */ {
 public:
  inline Column() : Column(nullptr) {}
  ~Column() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Column* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Column));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Column(
      ::google::protobuf::internal::ConstantInitialized);

  inline Column(const Column& from) : Column(nullptr, from) {}
  inline Column(Column&& from) noexcept
      : Column(nullptr, std::move(from)) {}
  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline Column& operator=(Column&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Column& default_instance() {
    return *internal_default_instance();
  }
  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
        &_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Column& a, Column& b) { a.Swap(&b); }
  inline void Swap(Column* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Column* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Column* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Column>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Column& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Column& from) { Column::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Column* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.Column"; }

 protected:
  explicit Column(::google::protobuf::Arena* arena);
  Column(::google::protobuf::Arena* arena, const Column& from);
  Column(::google::protobuf::Arena* arena, Column&& from) noexcept
      : Column(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTasksFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .todo.Task tasks = 3;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;

  public:
  void clear_tasks() ;
  ::todo::Task* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField<::todo::Task>* mutable_tasks();

  private:
  const ::google::protobuf::RepeatedPtrField<::todo::Task>& _internal_tasks() const;
  ::google::protobuf::RepeatedPtrField<::todo::Task>* _internal_mutable_tasks();
  public:
  const ::todo::Task& tasks(int index) const;
  ::todo::Task* add_tasks();
  const ::google::protobuf::RepeatedPtrField<::todo::Task>& tasks() const;
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:todo.Column)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      24, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Column& from_msg);
    ::google::protobuf::RepeatedPtrField< ::todo::Task > tasks_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class ColumnList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.ColumnList) */ {
 public:
  inline ColumnList() : ColumnList(nullptr) {}
  ~ColumnList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ColumnList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ColumnList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ColumnList(
      ::google::protobuf::internal::ConstantInitialized);

  inline ColumnList(const ColumnList& from) : ColumnList(nullptr, from) {}
  inline ColumnList(ColumnList&& from) noexcept
      : ColumnList(nullptr, std::move(from)) {}
  inline ColumnList& operator=(const ColumnList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnList& operator=(ColumnList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnList* internal_default_instance() {
    return reinterpret_cast<const ColumnList*>(
        &_ColumnList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(ColumnList& a, ColumnList& b) { a.Swap(&b); }
  inline void Swap(ColumnList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ColumnList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ColumnList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ColumnList& from) { ColumnList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ColumnList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.ColumnList"; }

 protected:
  explicit ColumnList(::google::protobuf::Arena* arena);
  ColumnList(::google::protobuf::Arena* arena, const ColumnList& from);
  ColumnList(::google::protobuf::Arena* arena, ColumnList&& from) noexcept
      : ColumnList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kColumnsFieldNumber = 1,
  };
  // repeated .todo.Column columns = 1;
  int columns_size() const;
  private:
  int _internal_columns_size() const;

  public:
  void clear_columns() ;
  ::todo::Column* mutable_columns(int index);
  ::google::protobuf::RepeatedPtrField<::todo::Column>* mutable_columns();

  private:
  const ::google::protobuf::RepeatedPtrField<::todo::Column>& _internal_columns() const;
  ::google::protobuf::RepeatedPtrField<::todo::Column>* _internal_mutable_columns();
  public:
  const ::todo::Column& columns(int index) const;
  ::todo::Column* add_columns();
  const ::google::protobuf::RepeatedPtrField<::todo::Column>& columns() const;
  // @@protoc_insertion_point(class_scope:todo.ColumnList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ColumnList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::todo::Column > columns_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};
// -------------------------------------------------------------------

class Board final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:todo.Board) */ {
 public:
  inline Board() : Board(nullptr) {}
  ~Board() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Board* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Board));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Board(
      ::google::protobuf::internal::ConstantInitialized);

  inline Board(const Board& from) : Board(nullptr, from) {}
  inline Board(Board&& from) noexcept
      : Board(nullptr, std::move(from)) {}
  inline Board& operator=(const Board& from) {
    CopyFrom(from);
    return *this;
  }
  inline Board& operator=(Board&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Board& default_instance() {
    return *internal_default_instance();
  }
  static inline const Board* internal_default_instance() {
    return reinterpret_cast<const Board*>(
        &_Board_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Board& a, Board& b) { a.Swap(&b); }
  inline void Swap(Board* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Board* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Board* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Board>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Board& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Board& from) { Board::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Board* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "todo.Board"; }

 protected:
  explicit Board(::google::protobuf::Arena* arena);
  Board(::google::protobuf::Arena* arena, const Board& from);
  Board(::google::protobuf::Arena* arena, Board&& from) noexcept
      : Board(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kColumnsFieldNumber = 1,
  };
  // repeated .todo.Column columns = 1;
  int columns_size() const;
  private:
  int _internal_columns_size() const;

  public:
  void clear_columns() ;
  ::todo::Column* mutable_columns(int index);
  ::google::protobuf::RepeatedPtrField<::todo::Column>* mutable_columns();

  private:
  const ::google::protobuf::RepeatedPtrField<::todo::Column>& _internal_columns() const;
  ::google::protobuf::RepeatedPtrField<::todo::Column>* _internal_mutable_columns();
  public:
  const ::todo::Column& columns(int index) const;
  ::todo::Column* add_columns();
  const ::google::protobuf::RepeatedPtrField<::todo::Column>& columns() const;
  // @@protoc_insertion_point(class_scope:todo.Board)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Board& from_msg);
    ::google::protobuf::RepeatedPtrField< ::todo::Column > columns_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_todo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// Task

// int32 id = 1;
inline void Task::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t Task::id() const {
  // @@protoc_insertion_point(field_get:todo.Task.id)
  return _internal_id();
}
inline void Task::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:todo.Task.id)
}
inline ::int32_t Task::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Task::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string title = 2;
inline void Task::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Task::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.Task.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Task::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:todo.Task.title)
}
inline std::string* Task::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:todo.Task.title)
  return _s;
}
inline const std::string& Task::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void Task::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* Task::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* Task::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:todo.Task.title)
  return _impl_.title_.Release();
}
inline void Task::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:todo.Task.title)
}

// string description = 3;
inline void Task::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Task::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.Task.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Task::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:todo.Task.description)
}
inline std::string* Task::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:todo.Task.description)
  return _s;
}
inline const std::string& Task::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void Task::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Task::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Task::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:todo.Task.description)
  return _impl_.description_.Release();
}
inline void Task::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:todo.Task.description)
}

// .todo.State state = 4;
inline void Task::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = 0;
}
inline ::todo::State Task::state() const {
  // @@protoc_insertion_point(field_get:todo.Task.state)
  return _internal_state();
}
inline void Task::set_state(::todo::State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:todo.Task.state)
}
inline ::todo::State Task::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::todo::State>(_impl_.state_);
}
inline void Task::_internal_set_state(::todo::State value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = value;
}

// -------------------------------------------------------------------

// Column

// int32 id = 1;
inline void Column::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t Column::id() const {
  // @@protoc_insertion_point(field_get:todo.Column.id)
  return _internal_id();
}
inline void Column::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:todo.Column.id)
}
inline ::int32_t Column::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Column::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string name = 2;
inline void Column::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Column::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.Column.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Column::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:todo.Column.name)
}
inline std::string* Column::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:todo.Column.name)
  return _s;
}
inline const std::string& Column::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Column::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Column::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Column::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:todo.Column.name)
  return _impl_.name_.Release();
}
inline void Column::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:todo.Column.name)
}

// repeated .todo.Task tasks = 3;
inline int Column::_internal_tasks_size() const {
  return _internal_tasks().size();
}
inline int Column::tasks_size() const {
  return _internal_tasks_size();
}
inline void Column::clear_tasks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tasks_.Clear();
}
inline ::todo::Task* Column::mutable_tasks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:todo.Column.tasks)
  return _internal_mutable_tasks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::todo::Task>* Column::mutable_tasks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:todo.Column.tasks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tasks();
}
inline const ::todo::Task& Column::tasks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.Column.tasks)
  return _internal_tasks().Get(index);
}
inline ::todo::Task* Column::add_tasks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::todo::Task* _add = _internal_mutable_tasks()->Add();
  // @@protoc_insertion_point(field_add:todo.Column.tasks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::todo::Task>& Column::tasks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:todo.Column.tasks)
  return _internal_tasks();
}
inline const ::google::protobuf::RepeatedPtrField<::todo::Task>&
Column::_internal_tasks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tasks_;
}
inline ::google::protobuf::RepeatedPtrField<::todo::Task>*
Column::_internal_mutable_tasks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tasks_;
}

// -------------------------------------------------------------------

// Board

// repeated .todo.Column columns = 1;
inline int Board::_internal_columns_size() const {
  return _internal_columns().size();
}
inline int Board::columns_size() const {
  return _internal_columns_size();
}
inline void Board::clear_columns() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.columns_.Clear();
}
inline ::todo::Column* Board::mutable_columns(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:todo.Board.columns)
  return _internal_mutable_columns()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::todo::Column>* Board::mutable_columns()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:todo.Board.columns)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_columns();
}
inline const ::todo::Column& Board::columns(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.Board.columns)
  return _internal_columns().Get(index);
}
inline ::todo::Column* Board::add_columns() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::todo::Column* _add = _internal_mutable_columns()->Add();
  // @@protoc_insertion_point(field_add:todo.Board.columns)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::todo::Column>& Board::columns() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:todo.Board.columns)
  return _internal_columns();
}
inline const ::google::protobuf::RepeatedPtrField<::todo::Column>&
Board::_internal_columns() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.columns_;
}
inline ::google::protobuf::RepeatedPtrField<::todo::Column>*
Board::_internal_mutable_columns() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.columns_;
}

// -------------------------------------------------------------------

// AddColumnRequest

// string name = 1;
inline void AddColumnRequest::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AddColumnRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.AddColumnRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddColumnRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:todo.AddColumnRequest.name)
}
inline std::string* AddColumnRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:todo.AddColumnRequest.name)
  return _s;
}
inline const std::string& AddColumnRequest::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void AddColumnRequest::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* AddColumnRequest::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* AddColumnRequest::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:todo.AddColumnRequest.name)
  return _impl_.name_.Release();
}
inline void AddColumnRequest::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:todo.AddColumnRequest.name)
}

// -------------------------------------------------------------------

// RenameColumnRequest

// int32 column_id = 1;
inline void RenameColumnRequest::clear_column_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_id_ = 0;
}
inline ::int32_t RenameColumnRequest::column_id() const {
  // @@protoc_insertion_point(field_get:todo.RenameColumnRequest.column_id)
  return _internal_column_id();
}
inline void RenameColumnRequest::set_column_id(::int32_t value) {
  _internal_set_column_id(value);
  // @@protoc_insertion_point(field_set:todo.RenameColumnRequest.column_id)
}
inline ::int32_t RenameColumnRequest::_internal_column_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.column_id_;
}
inline void RenameColumnRequest::_internal_set_column_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_id_ = value;
}

// string new_name = 2;
inline void RenameColumnRequest::clear_new_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.ClearToEmpty();
}
inline const std::string& RenameColumnRequest::new_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.RenameColumnRequest.new_name)
  return _internal_new_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RenameColumnRequest::set_new_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:todo.RenameColumnRequest.new_name)
}
inline std::string* RenameColumnRequest::mutable_new_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_name();
  // @@protoc_insertion_point(field_mutable:todo.RenameColumnRequest.new_name)
  return _s;
}
inline const std::string& RenameColumnRequest::_internal_new_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_name_.Get();
}
inline void RenameColumnRequest::_internal_set_new_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.Set(value, GetArena());
}
inline std::string* RenameColumnRequest::_internal_mutable_new_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_name_.Mutable( GetArena());
}
inline std::string* RenameColumnRequest::release_new_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:todo.RenameColumnRequest.new_name)
  return _impl_.new_name_.Release();
}
inline void RenameColumnRequest::set_allocated_new_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_name_.IsDefault()) {
    _impl_.new_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:todo.RenameColumnRequest.new_name)
}

// -------------------------------------------------------------------

// AddTaskToColumnRequest

// int32 column_id = 1;
inline void AddTaskToColumnRequest::clear_column_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_id_ = 0;
}
inline ::int32_t AddTaskToColumnRequest::column_id() const {
  // @@protoc_insertion_point(field_get:todo.AddTaskToColumnRequest.column_id)
  return _internal_column_id();
}
inline void AddTaskToColumnRequest::set_column_id(::int32_t value) {
  _internal_set_column_id(value);
  // @@protoc_insertion_point(field_set:todo.AddTaskToColumnRequest.column_id)
}
inline ::int32_t AddTaskToColumnRequest::_internal_column_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.column_id_;
}
inline void AddTaskToColumnRequest::_internal_set_column_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_id_ = value;
}

// string title = 2;
inline void AddTaskToColumnRequest::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& AddTaskToColumnRequest::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.AddTaskToColumnRequest.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddTaskToColumnRequest::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:todo.AddTaskToColumnRequest.title)
}
inline std::string* AddTaskToColumnRequest::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:todo.AddTaskToColumnRequest.title)
  return _s;
}
inline const std::string& AddTaskToColumnRequest::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void AddTaskToColumnRequest::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* AddTaskToColumnRequest::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* AddTaskToColumnRequest::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:todo.AddTaskToColumnRequest.title)
  return _impl_.title_.Release();
}
inline void AddTaskToColumnRequest::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:todo.AddTaskToColumnRequest.title)
}

// string description = 3;
inline void AddTaskToColumnRequest::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& AddTaskToColumnRequest::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.AddTaskToColumnRequest.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddTaskToColumnRequest::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:todo.AddTaskToColumnRequest.description)
}
inline std::string* AddTaskToColumnRequest::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:todo.AddTaskToColumnRequest.description)
  return _s;
}
inline const std::string& AddTaskToColumnRequest::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void AddTaskToColumnRequest::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* AddTaskToColumnRequest::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* AddTaskToColumnRequest::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:todo.AddTaskToColumnRequest.description)
  return _impl_.description_.Release();
}
inline void AddTaskToColumnRequest::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:todo.AddTaskToColumnRequest.description)
}

// -------------------------------------------------------------------

// MoveTaskRequest

// int32 task_id = 1;
inline void MoveTaskRequest::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = 0;
}
inline ::int32_t MoveTaskRequest::task_id() const {
  // @@protoc_insertion_point(field_get:todo.MoveTaskRequest.task_id)
  return _internal_task_id();
}
inline void MoveTaskRequest::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:todo.MoveTaskRequest.task_id)
}
inline ::int32_t MoveTaskRequest::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_;
}
inline void MoveTaskRequest::_internal_set_task_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = value;
}

// int32 from_column_id = 2;
inline void MoveTaskRequest::clear_from_column_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_column_id_ = 0;
}
inline ::int32_t MoveTaskRequest::from_column_id() const {
  // @@protoc_insertion_point(field_get:todo.MoveTaskRequest.from_column_id)
  return _internal_from_column_id();
}
inline void MoveTaskRequest::set_from_column_id(::int32_t value) {
  _internal_set_from_column_id(value);
  // @@protoc_insertion_point(field_set:todo.MoveTaskRequest.from_column_id)
}
inline ::int32_t MoveTaskRequest::_internal_from_column_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_column_id_;
}
inline void MoveTaskRequest::_internal_set_from_column_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_column_id_ = value;
}

// int32 to_column_id = 3;
inline void MoveTaskRequest::clear_to_column_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_column_id_ = 0;
}
inline ::int32_t MoveTaskRequest::to_column_id() const {
  // @@protoc_insertion_point(field_get:todo.MoveTaskRequest.to_column_id)
  return _internal_to_column_id();
}
inline void MoveTaskRequest::set_to_column_id(::int32_t value) {
  _internal_set_to_column_id(value);
  // @@protoc_insertion_point(field_set:todo.MoveTaskRequest.to_column_id)
}
inline ::int32_t MoveTaskRequest::_internal_to_column_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_column_id_;
}
inline void MoveTaskRequest::_internal_set_to_column_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_column_id_ = value;
}

// -------------------------------------------------------------------

// UpdateTaskRequest

// int32 task_id = 1;
inline void UpdateTaskRequest::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = 0;
}
inline ::int32_t UpdateTaskRequest::task_id() const {
  // @@protoc_insertion_point(field_get:todo.UpdateTaskRequest.task_id)
  return _internal_task_id();
}
inline void UpdateTaskRequest::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:todo.UpdateTaskRequest.task_id)
}
inline ::int32_t UpdateTaskRequest::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_;
}
inline void UpdateTaskRequest::_internal_set_task_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = value;
}

// string new_title = 2;
inline void UpdateTaskRequest::clear_new_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_title_.ClearToEmpty();
}
inline const std::string& UpdateTaskRequest::new_title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.UpdateTaskRequest.new_title)
  return _internal_new_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateTaskRequest::set_new_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:todo.UpdateTaskRequest.new_title)
}
inline std::string* UpdateTaskRequest::mutable_new_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_title();
  // @@protoc_insertion_point(field_mutable:todo.UpdateTaskRequest.new_title)
  return _s;
}
inline const std::string& UpdateTaskRequest::_internal_new_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_title_.Get();
}
inline void UpdateTaskRequest::_internal_set_new_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_title_.Set(value, GetArena());
}
inline std::string* UpdateTaskRequest::_internal_mutable_new_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_title_.Mutable( GetArena());
}
inline std::string* UpdateTaskRequest::release_new_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:todo.UpdateTaskRequest.new_title)
  return _impl_.new_title_.Release();
}
inline void UpdateTaskRequest::set_allocated_new_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_title_.IsDefault()) {
    _impl_.new_title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:todo.UpdateTaskRequest.new_title)
}

// string new_description = 3;
inline void UpdateTaskRequest::clear_new_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_description_.ClearToEmpty();
}
inline const std::string& UpdateTaskRequest::new_description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.UpdateTaskRequest.new_description)
  return _internal_new_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateTaskRequest::set_new_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:todo.UpdateTaskRequest.new_description)
}
inline std::string* UpdateTaskRequest::mutable_new_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_description();
  // @@protoc_insertion_point(field_mutable:todo.UpdateTaskRequest.new_description)
  return _s;
}
inline const std::string& UpdateTaskRequest::_internal_new_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_description_.Get();
}
inline void UpdateTaskRequest::_internal_set_new_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_description_.Set(value, GetArena());
}
inline std::string* UpdateTaskRequest::_internal_mutable_new_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_description_.Mutable( GetArena());
}
inline std::string* UpdateTaskRequest::release_new_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:todo.UpdateTaskRequest.new_description)
  return _impl_.new_description_.Release();
}
inline void UpdateTaskRequest::set_allocated_new_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_description_.IsDefault()) {
    _impl_.new_description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:todo.UpdateTaskRequest.new_description)
}

// .todo.State new_state = 4;
inline void UpdateTaskRequest::clear_new_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_state_ = 0;
}
inline ::todo::State UpdateTaskRequest::new_state() const {
  // @@protoc_insertion_point(field_get:todo.UpdateTaskRequest.new_state)
  return _internal_new_state();
}
inline void UpdateTaskRequest::set_new_state(::todo::State value) {
  _internal_set_new_state(value);
  // @@protoc_insertion_point(field_set:todo.UpdateTaskRequest.new_state)
}
inline ::todo::State UpdateTaskRequest::_internal_new_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::todo::State>(_impl_.new_state_);
}
inline void UpdateTaskRequest::_internal_set_new_state(::todo::State value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_state_ = value;
}

// -------------------------------------------------------------------

// ToggleTaskStateRequest

// int32 task_id = 1;
inline void ToggleTaskStateRequest::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = 0;
}
inline ::int32_t ToggleTaskStateRequest::task_id() const {
  // @@protoc_insertion_point(field_get:todo.ToggleTaskStateRequest.task_id)
  return _internal_task_id();
}
inline void ToggleTaskStateRequest::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:todo.ToggleTaskStateRequest.task_id)
}
inline ::int32_t ToggleTaskStateRequest::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_;
}
inline void ToggleTaskStateRequest::_internal_set_task_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = value;
}

// -------------------------------------------------------------------

// ColumnList

// repeated .todo.Column columns = 1;
inline int ColumnList::_internal_columns_size() const {
  return _internal_columns().size();
}
inline int ColumnList::columns_size() const {
  return _internal_columns_size();
}
inline void ColumnList::clear_columns() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.columns_.Clear();
}
inline ::todo::Column* ColumnList::mutable_columns(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:todo.ColumnList.columns)
  return _internal_mutable_columns()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::todo::Column>* ColumnList::mutable_columns()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:todo.ColumnList.columns)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_columns();
}
inline const ::todo::Column& ColumnList::columns(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:todo.ColumnList.columns)
  return _internal_columns().Get(index);
}
inline ::todo::Column* ColumnList::add_columns() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::todo::Column* _add = _internal_mutable_columns()->Add();
  // @@protoc_insertion_point(field_add:todo.ColumnList.columns)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::todo::Column>& ColumnList::columns() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:todo.ColumnList.columns)
  return _internal_columns();
}
inline const ::google::protobuf::RepeatedPtrField<::todo::Column>&
ColumnList::_internal_columns() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.columns_;
}
inline ::google::protobuf::RepeatedPtrField<::todo::Column>*
ColumnList::_internal_mutable_columns() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.columns_;
}

// -------------------------------------------------------------------

// ColumnIdRequest

// int32 column_id = 1;
inline void ColumnIdRequest::clear_column_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_id_ = 0;
}
inline ::int32_t ColumnIdRequest::column_id() const {
  // @@protoc_insertion_point(field_get:todo.ColumnIdRequest.column_id)
  return _internal_column_id();
}
inline void ColumnIdRequest::set_column_id(::int32_t value) {
  _internal_set_column_id(value);
  // @@protoc_insertion_point(field_set:todo.ColumnIdRequest.column_id)
}
inline ::int32_t ColumnIdRequest::_internal_column_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.column_id_;
}
inline void ColumnIdRequest::_internal_set_column_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_id_ = value;
}

// -------------------------------------------------------------------

// TaskIdRequest

// int32 task_id = 1;
inline void TaskIdRequest::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = 0;
}
inline ::int32_t TaskIdRequest::task_id() const {
  // @@protoc_insertion_point(field_get:todo.TaskIdRequest.task_id)
  return _internal_task_id();
}
inline void TaskIdRequest::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:todo.TaskIdRequest.task_id)
}
inline ::int32_t TaskIdRequest::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_;
}
inline void TaskIdRequest::_internal_set_task_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace todo


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::todo::State> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::todo::State>() {
  return ::todo::State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // todo_2eproto_2epb_2eh
