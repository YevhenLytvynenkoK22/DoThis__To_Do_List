// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo.proto

#include "todo.pb.h"
#include "todo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace todo {

static const char* ToDoService_method_names[] = {
  "/todo.ToDoService/AddColumn",
  "/todo.ToDoService/RenameColumn",
  "/todo.ToDoService/GetBoard",
  "/todo.ToDoService/AddTaskToColumn",
  "/todo.ToDoService/UpdateTask",
  "/todo.ToDoService/ToggleTaskState",
  "/todo.ToDoService/MoveTask",
  "/todo.ToDoService/Sync",
  "/todo.ToDoService/DeleteColumn",
  "/todo.ToDoService/DeleteTask",
};

std::unique_ptr< ToDoService::Stub> ToDoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ToDoService::Stub> stub(new ToDoService::Stub(channel, options));
  return stub;
}

ToDoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddColumn_(ToDoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenameColumn_(ToDoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBoard_(ToDoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddTaskToColumn_(ToDoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateTask_(ToDoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ToggleTaskState_(ToDoService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveTask_(ToDoService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sync_(ToDoService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteColumn_(ToDoService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTask_(ToDoService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ToDoService::Stub::AddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::todo::Column* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::AddColumnRequest, ::todo::Column, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddColumn_, context, request, response);
}

void ToDoService::Stub::async::AddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest* request, ::todo::Column* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::AddColumnRequest, ::todo::Column, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddColumn_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::AddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest* request, ::todo::Column* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddColumn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::Column>* ToDoService::Stub::PrepareAsyncAddColumnRaw(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::Column, ::todo::AddColumnRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddColumn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::Column>* ToDoService::Stub::AsyncAddColumnRaw(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddColumnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ToDoService::Stub::RenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::todo::Column* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::RenameColumnRequest, ::todo::Column, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RenameColumn_, context, request, response);
}

void ToDoService::Stub::async::RenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest* request, ::todo::Column* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::RenameColumnRequest, ::todo::Column, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenameColumn_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::RenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest* request, ::todo::Column* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenameColumn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::Column>* ToDoService::Stub::PrepareAsyncRenameColumnRaw(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::Column, ::todo::RenameColumnRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RenameColumn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::Column>* ToDoService::Stub::AsyncRenameColumnRaw(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenameColumnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ToDoService::Stub::GetBoard(::grpc::ClientContext* context, const ::todo::Empty& request, ::todo::Board* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::Empty, ::todo::Board, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBoard_, context, request, response);
}

void ToDoService::Stub::async::GetBoard(::grpc::ClientContext* context, const ::todo::Empty* request, ::todo::Board* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::Empty, ::todo::Board, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBoard_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::GetBoard(::grpc::ClientContext* context, const ::todo::Empty* request, ::todo::Board* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBoard_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::Board>* ToDoService::Stub::PrepareAsyncGetBoardRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::Board, ::todo::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBoard_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::Board>* ToDoService::Stub::AsyncGetBoardRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBoardRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ToDoService::Stub::AddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::todo::Task* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::AddTaskToColumnRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddTaskToColumn_, context, request, response);
}

void ToDoService::Stub::async::AddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::AddTaskToColumnRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddTaskToColumn_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::AddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddTaskToColumn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::Task>* ToDoService::Stub::PrepareAsyncAddTaskToColumnRaw(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::Task, ::todo::AddTaskToColumnRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddTaskToColumn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::Task>* ToDoService::Stub::AsyncAddTaskToColumnRaw(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddTaskToColumnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ToDoService::Stub::UpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::todo::Task* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::UpdateTaskRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateTask_, context, request, response);
}

void ToDoService::Stub::async::UpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::UpdateTaskRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTask_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::UpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::Task>* ToDoService::Stub::PrepareAsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::Task, ::todo::UpdateTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::Task>* ToDoService::Stub::AsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ToDoService::Stub::ToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::todo::Task* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::ToggleTaskStateRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ToggleTaskState_, context, request, response);
}

void ToDoService::Stub::async::ToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::ToggleTaskStateRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ToggleTaskState_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::ToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ToggleTaskState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::Task>* ToDoService::Stub::PrepareAsyncToggleTaskStateRaw(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::Task, ::todo::ToggleTaskStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ToggleTaskState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::Task>* ToDoService::Stub::AsyncToggleTaskStateRaw(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncToggleTaskStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ToDoService::Stub::MoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::todo::Task* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::MoveTaskRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveTask_, context, request, response);
}

void ToDoService::Stub::async::MoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::MoveTaskRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveTask_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::MoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::Task>* ToDoService::Stub::PrepareAsyncMoveTaskRaw(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::Task, ::todo::MoveTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::Task>* ToDoService::Stub::AsyncMoveTaskRaw(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::todo::Board>* ToDoService::Stub::SyncRaw(::grpc::ClientContext* context, const ::todo::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::todo::Board>::Create(channel_.get(), rpcmethod_Sync_, context, request);
}

void ToDoService::Stub::async::Sync(::grpc::ClientContext* context, const ::todo::Empty* request, ::grpc::ClientReadReactor< ::todo::Board>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::todo::Board>::Create(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::todo::Board>* ToDoService::Stub::AsyncSyncRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::todo::Board>::Create(channel_.get(), cq, rpcmethod_Sync_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::todo::Board>* ToDoService::Stub::PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::todo::Board>::Create(channel_.get(), cq, rpcmethod_Sync_, context, request, false, nullptr);
}

::grpc::Status ToDoService::Stub::DeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::todo::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::ColumnIdRequest, ::todo::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteColumn_, context, request, response);
}

void ToDoService::Stub::async::DeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest* request, ::todo::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::ColumnIdRequest, ::todo::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteColumn_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::DeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest* request, ::todo::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteColumn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::Empty>* ToDoService::Stub::PrepareAsyncDeleteColumnRaw(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::Empty, ::todo::ColumnIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteColumn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::Empty>* ToDoService::Stub::AsyncDeleteColumnRaw(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteColumnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ToDoService::Stub::DeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::todo::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::TaskIdRequest, ::todo::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTask_, context, request, response);
}

void ToDoService::Stub::async::DeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest* request, ::todo::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::TaskIdRequest, ::todo::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTask_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::DeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest* request, ::todo::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::Empty>* ToDoService::Stub::PrepareAsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::Empty, ::todo::TaskIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::Empty>* ToDoService::Stub::AsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

ToDoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::todo::AddColumnRequest, ::todo::Column, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::AddColumnRequest* req,
             ::todo::Column* resp) {
               return service->AddColumn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::todo::RenameColumnRequest, ::todo::Column, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::RenameColumnRequest* req,
             ::todo::Column* resp) {
               return service->RenameColumn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::todo::Empty, ::todo::Board, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::Empty* req,
             ::todo::Board* resp) {
               return service->GetBoard(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::todo::AddTaskToColumnRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::AddTaskToColumnRequest* req,
             ::todo::Task* resp) {
               return service->AddTaskToColumn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::todo::UpdateTaskRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::UpdateTaskRequest* req,
             ::todo::Task* resp) {
               return service->UpdateTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::todo::ToggleTaskStateRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::ToggleTaskStateRequest* req,
             ::todo::Task* resp) {
               return service->ToggleTaskState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::todo::MoveTaskRequest, ::todo::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::MoveTaskRequest* req,
             ::todo::Task* resp) {
               return service->MoveTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ToDoService::Service, ::todo::Empty, ::todo::Board>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::Empty* req,
             ::grpc::ServerWriter<::todo::Board>* writer) {
               return service->Sync(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::todo::ColumnIdRequest, ::todo::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::ColumnIdRequest* req,
             ::todo::Empty* resp) {
               return service->DeleteColumn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::todo::TaskIdRequest, ::todo::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::TaskIdRequest* req,
             ::todo::Empty* resp) {
               return service->DeleteTask(ctx, req, resp);
             }, this)));
}

ToDoService::Service::~Service() {
}

::grpc::Status ToDoService::Service::AddColumn(::grpc::ServerContext* context, const ::todo::AddColumnRequest* request, ::todo::Column* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::RenameColumn(::grpc::ServerContext* context, const ::todo::RenameColumnRequest* request, ::todo::Column* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::GetBoard(::grpc::ServerContext* context, const ::todo::Empty* request, ::todo::Board* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::AddTaskToColumn(::grpc::ServerContext* context, const ::todo::AddTaskToColumnRequest* request, ::todo::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::UpdateTask(::grpc::ServerContext* context, const ::todo::UpdateTaskRequest* request, ::todo::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::ToggleTaskState(::grpc::ServerContext* context, const ::todo::ToggleTaskStateRequest* request, ::todo::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::MoveTask(::grpc::ServerContext* context, const ::todo::MoveTaskRequest* request, ::todo::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::Sync(::grpc::ServerContext* context, const ::todo::Empty* request, ::grpc::ServerWriter< ::todo::Board>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::DeleteColumn(::grpc::ServerContext* context, const ::todo::ColumnIdRequest* request, ::todo::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::DeleteTask(::grpc::ServerContext* context, const ::todo::TaskIdRequest* request, ::todo::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace todo

