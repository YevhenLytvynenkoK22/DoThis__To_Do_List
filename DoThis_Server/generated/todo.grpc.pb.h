// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo.proto
#ifndef GRPC_todo_2eproto__INCLUDED
#define GRPC_todo_2eproto__INCLUDED

#include "todo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace todo {

class ToDoService final {
 public:
  static constexpr char const* service_full_name() {
    return "todo.ToDoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::todo::Column* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>> AsyncAddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>>(AsyncAddColumnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>> PrepareAsyncAddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>>(PrepareAsyncAddColumnRaw(context, request, cq));
    }
    virtual ::grpc::Status RenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::todo::Column* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>> AsyncRenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>>(AsyncRenameColumnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>> PrepareAsyncRenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>>(PrepareAsyncRenameColumnRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBoard(::grpc::ClientContext* context, const ::todo::Empty& request, ::todo::Board* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Board>> AsyncGetBoard(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Board>>(AsyncGetBoardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Board>> PrepareAsyncGetBoard(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Board>>(PrepareAsyncGetBoardRaw(context, request, cq));
    }
    virtual ::grpc::Status AddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::todo::Task* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>> AsyncAddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>>(AsyncAddTaskToColumnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>> PrepareAsyncAddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>>(PrepareAsyncAddTaskToColumnRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::todo::Task* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>> AsyncUpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>>(AsyncUpdateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>> PrepareAsyncUpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>>(PrepareAsyncUpdateTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status ToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::todo::Task* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>> AsyncToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>>(AsyncToggleTaskStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>> PrepareAsyncToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>>(PrepareAsyncToggleTaskStateRaw(context, request, cq));
    }
    virtual ::grpc::Status MoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::todo::Task* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>> AsyncMoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>>(AsyncMoveTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>> PrepareAsyncMoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>>(PrepareAsyncMoveTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::todo::Board>> Sync(::grpc::ClientContext* context, const ::todo::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::todo::Board>>(SyncRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::todo::Board>> AsyncSync(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::todo::Board>>(AsyncSyncRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::todo::Board>> PrepareAsyncSync(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::todo::Board>>(PrepareAsyncSyncRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::todo::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>> AsyncDeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>>(AsyncDeleteColumnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>> PrepareAsyncDeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>>(PrepareAsyncDeleteColumnRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::todo::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>> AsyncDeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>>(AsyncDeleteTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>> PrepareAsyncDeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>>(PrepareAsyncDeleteTaskRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest* request, ::todo::Column* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest* request, ::todo::Column* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest* request, ::todo::Column* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest* request, ::todo::Column* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBoard(::grpc::ClientContext* context, const ::todo::Empty* request, ::todo::Board* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBoard(::grpc::ClientContext* context, const ::todo::Empty* request, ::todo::Board* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Sync(::grpc::ClientContext* context, const ::todo::Empty* request, ::grpc::ClientReadReactor< ::todo::Board>* reactor) = 0;
      virtual void DeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest* request, ::todo::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest* request, ::todo::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest* request, ::todo::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest* request, ::todo::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>* AsyncAddColumnRaw(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>* PrepareAsyncAddColumnRaw(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>* AsyncRenameColumnRaw(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Column>* PrepareAsyncRenameColumnRaw(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Board>* AsyncGetBoardRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Board>* PrepareAsyncGetBoardRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>* AsyncAddTaskToColumnRaw(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>* PrepareAsyncAddTaskToColumnRaw(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>* AsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>* PrepareAsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>* AsyncToggleTaskStateRaw(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>* PrepareAsyncToggleTaskStateRaw(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>* AsyncMoveTaskRaw(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Task>* PrepareAsyncMoveTaskRaw(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::todo::Board>* SyncRaw(::grpc::ClientContext* context, const ::todo::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::todo::Board>* AsyncSyncRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::todo::Board>* PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>* AsyncDeleteColumnRaw(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>* PrepareAsyncDeleteColumnRaw(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>* AsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::Empty>* PrepareAsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::todo::Column* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Column>> AsyncAddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Column>>(AsyncAddColumnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Column>> PrepareAsyncAddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Column>>(PrepareAsyncAddColumnRaw(context, request, cq));
    }
    ::grpc::Status RenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::todo::Column* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Column>> AsyncRenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Column>>(AsyncRenameColumnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Column>> PrepareAsyncRenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Column>>(PrepareAsyncRenameColumnRaw(context, request, cq));
    }
    ::grpc::Status GetBoard(::grpc::ClientContext* context, const ::todo::Empty& request, ::todo::Board* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Board>> AsyncGetBoard(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Board>>(AsyncGetBoardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Board>> PrepareAsyncGetBoard(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Board>>(PrepareAsyncGetBoardRaw(context, request, cq));
    }
    ::grpc::Status AddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::todo::Task* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>> AsyncAddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>>(AsyncAddTaskToColumnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>> PrepareAsyncAddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>>(PrepareAsyncAddTaskToColumnRaw(context, request, cq));
    }
    ::grpc::Status UpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::todo::Task* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>> AsyncUpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>>(AsyncUpdateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>> PrepareAsyncUpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>>(PrepareAsyncUpdateTaskRaw(context, request, cq));
    }
    ::grpc::Status ToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::todo::Task* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>> AsyncToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>>(AsyncToggleTaskStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>> PrepareAsyncToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>>(PrepareAsyncToggleTaskStateRaw(context, request, cq));
    }
    ::grpc::Status MoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::todo::Task* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>> AsyncMoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>>(AsyncMoveTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>> PrepareAsyncMoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Task>>(PrepareAsyncMoveTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::todo::Board>> Sync(::grpc::ClientContext* context, const ::todo::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::todo::Board>>(SyncRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::todo::Board>> AsyncSync(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::todo::Board>>(AsyncSyncRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::todo::Board>> PrepareAsyncSync(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::todo::Board>>(PrepareAsyncSyncRaw(context, request, cq));
    }
    ::grpc::Status DeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::todo::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Empty>> AsyncDeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Empty>>(AsyncDeleteColumnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Empty>> PrepareAsyncDeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Empty>>(PrepareAsyncDeleteColumnRaw(context, request, cq));
    }
    ::grpc::Status DeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::todo::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Empty>> AsyncDeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Empty>>(AsyncDeleteTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Empty>> PrepareAsyncDeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::Empty>>(PrepareAsyncDeleteTaskRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest* request, ::todo::Column* response, std::function<void(::grpc::Status)>) override;
      void AddColumn(::grpc::ClientContext* context, const ::todo::AddColumnRequest* request, ::todo::Column* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest* request, ::todo::Column* response, std::function<void(::grpc::Status)>) override;
      void RenameColumn(::grpc::ClientContext* context, const ::todo::RenameColumnRequest* request, ::todo::Column* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBoard(::grpc::ClientContext* context, const ::todo::Empty* request, ::todo::Board* response, std::function<void(::grpc::Status)>) override;
      void GetBoard(::grpc::ClientContext* context, const ::todo::Empty* request, ::todo::Board* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)>) override;
      void AddTaskToColumn(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)>) override;
      void UpdateTask(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)>) override;
      void ToggleTaskState(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest* request, ::todo::Task* response, std::function<void(::grpc::Status)>) override;
      void MoveTask(::grpc::ClientContext* context, const ::todo::MoveTaskRequest* request, ::todo::Task* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Sync(::grpc::ClientContext* context, const ::todo::Empty* request, ::grpc::ClientReadReactor< ::todo::Board>* reactor) override;
      void DeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest* request, ::todo::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteColumn(::grpc::ClientContext* context, const ::todo::ColumnIdRequest* request, ::todo::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest* request, ::todo::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteTask(::grpc::ClientContext* context, const ::todo::TaskIdRequest* request, ::todo::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::todo::Column>* AsyncAddColumnRaw(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Column>* PrepareAsyncAddColumnRaw(::grpc::ClientContext* context, const ::todo::AddColumnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Column>* AsyncRenameColumnRaw(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Column>* PrepareAsyncRenameColumnRaw(::grpc::ClientContext* context, const ::todo::RenameColumnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Board>* AsyncGetBoardRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Board>* PrepareAsyncGetBoardRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Task>* AsyncAddTaskToColumnRaw(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Task>* PrepareAsyncAddTaskToColumnRaw(::grpc::ClientContext* context, const ::todo::AddTaskToColumnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Task>* AsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Task>* PrepareAsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::todo::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Task>* AsyncToggleTaskStateRaw(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Task>* PrepareAsyncToggleTaskStateRaw(::grpc::ClientContext* context, const ::todo::ToggleTaskStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Task>* AsyncMoveTaskRaw(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Task>* PrepareAsyncMoveTaskRaw(::grpc::ClientContext* context, const ::todo::MoveTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::todo::Board>* SyncRaw(::grpc::ClientContext* context, const ::todo::Empty& request) override;
    ::grpc::ClientAsyncReader< ::todo::Board>* AsyncSyncRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::todo::Board>* PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::todo::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Empty>* AsyncDeleteColumnRaw(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Empty>* PrepareAsyncDeleteColumnRaw(::grpc::ClientContext* context, const ::todo::ColumnIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Empty>* AsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::Empty>* PrepareAsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::todo::TaskIdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddColumn_;
    const ::grpc::internal::RpcMethod rpcmethod_RenameColumn_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBoard_;
    const ::grpc::internal::RpcMethod rpcmethod_AddTaskToColumn_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateTask_;
    const ::grpc::internal::RpcMethod rpcmethod_ToggleTaskState_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveTask_;
    const ::grpc::internal::RpcMethod rpcmethod_Sync_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteColumn_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTask_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddColumn(::grpc::ServerContext* context, const ::todo::AddColumnRequest* request, ::todo::Column* response);
    virtual ::grpc::Status RenameColumn(::grpc::ServerContext* context, const ::todo::RenameColumnRequest* request, ::todo::Column* response);
    virtual ::grpc::Status GetBoard(::grpc::ServerContext* context, const ::todo::Empty* request, ::todo::Board* response);
    virtual ::grpc::Status AddTaskToColumn(::grpc::ServerContext* context, const ::todo::AddTaskToColumnRequest* request, ::todo::Task* response);
    virtual ::grpc::Status UpdateTask(::grpc::ServerContext* context, const ::todo::UpdateTaskRequest* request, ::todo::Task* response);
    virtual ::grpc::Status ToggleTaskState(::grpc::ServerContext* context, const ::todo::ToggleTaskStateRequest* request, ::todo::Task* response);
    virtual ::grpc::Status MoveTask(::grpc::ServerContext* context, const ::todo::MoveTaskRequest* request, ::todo::Task* response);
    virtual ::grpc::Status Sync(::grpc::ServerContext* context, const ::todo::Empty* request, ::grpc::ServerWriter< ::todo::Board>* writer);
    virtual ::grpc::Status DeleteColumn(::grpc::ServerContext* context, const ::todo::ColumnIdRequest* request, ::todo::Empty* response);
    virtual ::grpc::Status DeleteTask(::grpc::ServerContext* context, const ::todo::TaskIdRequest* request, ::todo::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddColumn() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddColumn(::grpc::ServerContext* /*context*/, const ::todo::AddColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddColumn(::grpc::ServerContext* context, ::todo::AddColumnRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::Column>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RenameColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RenameColumn() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RenameColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameColumn(::grpc::ServerContext* /*context*/, const ::todo::RenameColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenameColumn(::grpc::ServerContext* context, ::todo::RenameColumnRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::Column>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBoard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBoard() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetBoard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBoard(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::todo::Board* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBoard(::grpc::ServerContext* context, ::todo::Empty* request, ::grpc::ServerAsyncResponseWriter< ::todo::Board>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTaskToColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddTaskToColumn() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AddTaskToColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTaskToColumn(::grpc::ServerContext* /*context*/, const ::todo::AddTaskToColumnRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTaskToColumn(::grpc::ServerContext* context, ::todo::AddTaskToColumnRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::Task>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateTask() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::todo::UpdateTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTask(::grpc::ServerContext* context, ::todo::UpdateTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::Task>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ToggleTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ToggleTaskState() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ToggleTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToggleTaskState(::grpc::ServerContext* /*context*/, const ::todo::ToggleTaskStateRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToggleTaskState(::grpc::ServerContext* context, ::todo::ToggleTaskStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::Task>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveTask() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_MoveTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveTask(::grpc::ServerContext* /*context*/, const ::todo::MoveTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveTask(::grpc::ServerContext* context, ::todo::MoveTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::Task>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Sync() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::grpc::ServerWriter< ::todo::Board>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSync(::grpc::ServerContext* context, ::todo::Empty* request, ::grpc::ServerAsyncWriter< ::todo::Board>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteColumn() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DeleteColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteColumn(::grpc::ServerContext* /*context*/, const ::todo::ColumnIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteColumn(::grpc::ServerContext* context, ::todo::ColumnIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTask() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::todo::TaskIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTask(::grpc::ServerContext* context, ::todo::TaskIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddColumn<WithAsyncMethod_RenameColumn<WithAsyncMethod_GetBoard<WithAsyncMethod_AddTaskToColumn<WithAsyncMethod_UpdateTask<WithAsyncMethod_ToggleTaskState<WithAsyncMethod_MoveTask<WithAsyncMethod_Sync<WithAsyncMethod_DeleteColumn<WithAsyncMethod_DeleteTask<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddColumn() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::AddColumnRequest, ::todo::Column>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::AddColumnRequest* request, ::todo::Column* response) { return this->AddColumn(context, request, response); }));}
    void SetMessageAllocatorFor_AddColumn(
        ::grpc::MessageAllocator< ::todo::AddColumnRequest, ::todo::Column>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::AddColumnRequest, ::todo::Column>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddColumn(::grpc::ServerContext* /*context*/, const ::todo::AddColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddColumn(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::AddColumnRequest* /*request*/, ::todo::Column* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RenameColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RenameColumn() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::RenameColumnRequest, ::todo::Column>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::RenameColumnRequest* request, ::todo::Column* response) { return this->RenameColumn(context, request, response); }));}
    void SetMessageAllocatorFor_RenameColumn(
        ::grpc::MessageAllocator< ::todo::RenameColumnRequest, ::todo::Column>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::RenameColumnRequest, ::todo::Column>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RenameColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameColumn(::grpc::ServerContext* /*context*/, const ::todo::RenameColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RenameColumn(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::RenameColumnRequest* /*request*/, ::todo::Column* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBoard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBoard() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::Empty, ::todo::Board>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::Empty* request, ::todo::Board* response) { return this->GetBoard(context, request, response); }));}
    void SetMessageAllocatorFor_GetBoard(
        ::grpc::MessageAllocator< ::todo::Empty, ::todo::Board>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::Empty, ::todo::Board>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBoard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBoard(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::todo::Board* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBoard(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::Empty* /*request*/, ::todo::Board* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddTaskToColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddTaskToColumn() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::AddTaskToColumnRequest, ::todo::Task>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::AddTaskToColumnRequest* request, ::todo::Task* response) { return this->AddTaskToColumn(context, request, response); }));}
    void SetMessageAllocatorFor_AddTaskToColumn(
        ::grpc::MessageAllocator< ::todo::AddTaskToColumnRequest, ::todo::Task>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::AddTaskToColumnRequest, ::todo::Task>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddTaskToColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTaskToColumn(::grpc::ServerContext* /*context*/, const ::todo::AddTaskToColumnRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddTaskToColumn(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::AddTaskToColumnRequest* /*request*/, ::todo::Task* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateTask() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::UpdateTaskRequest, ::todo::Task>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::UpdateTaskRequest* request, ::todo::Task* response) { return this->UpdateTask(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateTask(
        ::grpc::MessageAllocator< ::todo::UpdateTaskRequest, ::todo::Task>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::UpdateTaskRequest, ::todo::Task>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::todo::UpdateTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTask(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::UpdateTaskRequest* /*request*/, ::todo::Task* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ToggleTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ToggleTaskState() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::ToggleTaskStateRequest, ::todo::Task>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::ToggleTaskStateRequest* request, ::todo::Task* response) { return this->ToggleTaskState(context, request, response); }));}
    void SetMessageAllocatorFor_ToggleTaskState(
        ::grpc::MessageAllocator< ::todo::ToggleTaskStateRequest, ::todo::Task>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::ToggleTaskStateRequest, ::todo::Task>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ToggleTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToggleTaskState(::grpc::ServerContext* /*context*/, const ::todo::ToggleTaskStateRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ToggleTaskState(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::ToggleTaskStateRequest* /*request*/, ::todo::Task* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MoveTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MoveTask() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::MoveTaskRequest, ::todo::Task>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::MoveTaskRequest* request, ::todo::Task* response) { return this->MoveTask(context, request, response); }));}
    void SetMessageAllocatorFor_MoveTask(
        ::grpc::MessageAllocator< ::todo::MoveTaskRequest, ::todo::Task>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::MoveTaskRequest, ::todo::Task>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MoveTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveTask(::grpc::ServerContext* /*context*/, const ::todo::MoveTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveTask(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::MoveTaskRequest* /*request*/, ::todo::Task* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Sync() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::todo::Empty, ::todo::Board>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::Empty* request) { return this->Sync(context, request); }));
    }
    ~WithCallbackMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::grpc::ServerWriter< ::todo::Board>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::todo::Board>* Sync(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteColumn() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::ColumnIdRequest, ::todo::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::ColumnIdRequest* request, ::todo::Empty* response) { return this->DeleteColumn(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteColumn(
        ::grpc::MessageAllocator< ::todo::ColumnIdRequest, ::todo::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::ColumnIdRequest, ::todo::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteColumn(::grpc::ServerContext* /*context*/, const ::todo::ColumnIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteColumn(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::ColumnIdRequest* /*request*/, ::todo::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteTask() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::TaskIdRequest, ::todo::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::TaskIdRequest* request, ::todo::Empty* response) { return this->DeleteTask(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTask(
        ::grpc::MessageAllocator< ::todo::TaskIdRequest, ::todo::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::TaskIdRequest, ::todo::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::todo::TaskIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTask(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::TaskIdRequest* /*request*/, ::todo::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddColumn<WithCallbackMethod_RenameColumn<WithCallbackMethod_GetBoard<WithCallbackMethod_AddTaskToColumn<WithCallbackMethod_UpdateTask<WithCallbackMethod_ToggleTaskState<WithCallbackMethod_MoveTask<WithCallbackMethod_Sync<WithCallbackMethod_DeleteColumn<WithCallbackMethod_DeleteTask<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddColumn() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddColumn(::grpc::ServerContext* /*context*/, const ::todo::AddColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RenameColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RenameColumn() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RenameColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameColumn(::grpc::ServerContext* /*context*/, const ::todo::RenameColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBoard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBoard() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetBoard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBoard(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::todo::Board* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddTaskToColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddTaskToColumn() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AddTaskToColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTaskToColumn(::grpc::ServerContext* /*context*/, const ::todo::AddTaskToColumnRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateTask() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::todo::UpdateTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ToggleTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ToggleTaskState() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ToggleTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToggleTaskState(::grpc::ServerContext* /*context*/, const ::todo::ToggleTaskStateRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveTask() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_MoveTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveTask(::grpc::ServerContext* /*context*/, const ::todo::MoveTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Sync() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::grpc::ServerWriter< ::todo::Board>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteColumn() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DeleteColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteColumn(::grpc::ServerContext* /*context*/, const ::todo::ColumnIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTask() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::todo::TaskIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddColumn() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddColumn(::grpc::ServerContext* /*context*/, const ::todo::AddColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddColumn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RenameColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RenameColumn() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RenameColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameColumn(::grpc::ServerContext* /*context*/, const ::todo::RenameColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenameColumn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBoard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBoard() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetBoard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBoard(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::todo::Board* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBoard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddTaskToColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddTaskToColumn() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AddTaskToColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTaskToColumn(::grpc::ServerContext* /*context*/, const ::todo::AddTaskToColumnRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTaskToColumn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateTask() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::todo::UpdateTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ToggleTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ToggleTaskState() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ToggleTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToggleTaskState(::grpc::ServerContext* /*context*/, const ::todo::ToggleTaskStateRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToggleTaskState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveTask() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_MoveTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveTask(::grpc::ServerContext* /*context*/, const ::todo::MoveTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Sync() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::grpc::ServerWriter< ::todo::Board>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteColumn() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DeleteColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteColumn(::grpc::ServerContext* /*context*/, const ::todo::ColumnIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteColumn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTask() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::todo::TaskIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddColumn() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddColumn(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddColumn(::grpc::ServerContext* /*context*/, const ::todo::AddColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddColumn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RenameColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RenameColumn() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RenameColumn(context, request, response); }));
    }
    ~WithRawCallbackMethod_RenameColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameColumn(::grpc::ServerContext* /*context*/, const ::todo::RenameColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RenameColumn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBoard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBoard() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBoard(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBoard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBoard(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::todo::Board* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBoard(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddTaskToColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddTaskToColumn() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddTaskToColumn(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddTaskToColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTaskToColumn(::grpc::ServerContext* /*context*/, const ::todo::AddTaskToColumnRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddTaskToColumn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateTask() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::todo::UpdateTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ToggleTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ToggleTaskState() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ToggleTaskState(context, request, response); }));
    }
    ~WithRawCallbackMethod_ToggleTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToggleTaskState(::grpc::ServerContext* /*context*/, const ::todo::ToggleTaskStateRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ToggleTaskState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MoveTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MoveTask() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_MoveTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveTask(::grpc::ServerContext* /*context*/, const ::todo::MoveTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Sync() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Sync(context, request); }));
    }
    ~WithRawCallbackMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::grpc::ServerWriter< ::todo::Board>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Sync(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteColumn() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteColumn(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteColumn(::grpc::ServerContext* /*context*/, const ::todo::ColumnIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteColumn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteTask() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::todo::TaskIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddColumn() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::AddColumnRequest, ::todo::Column>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::AddColumnRequest, ::todo::Column>* streamer) {
                       return this->StreamedAddColumn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddColumn(::grpc::ServerContext* /*context*/, const ::todo::AddColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddColumn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::AddColumnRequest,::todo::Column>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RenameColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RenameColumn() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::RenameColumnRequest, ::todo::Column>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::RenameColumnRequest, ::todo::Column>* streamer) {
                       return this->StreamedRenameColumn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RenameColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RenameColumn(::grpc::ServerContext* /*context*/, const ::todo::RenameColumnRequest* /*request*/, ::todo::Column* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRenameColumn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::RenameColumnRequest,::todo::Column>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBoard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBoard() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::Empty, ::todo::Board>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::Empty, ::todo::Board>* streamer) {
                       return this->StreamedGetBoard(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBoard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBoard(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::todo::Board* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBoard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::Empty,::todo::Board>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddTaskToColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddTaskToColumn() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::AddTaskToColumnRequest, ::todo::Task>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::AddTaskToColumnRequest, ::todo::Task>* streamer) {
                       return this->StreamedAddTaskToColumn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddTaskToColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddTaskToColumn(::grpc::ServerContext* /*context*/, const ::todo::AddTaskToColumnRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddTaskToColumn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::AddTaskToColumnRequest,::todo::Task>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateTask() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::UpdateTaskRequest, ::todo::Task>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::UpdateTaskRequest, ::todo::Task>* streamer) {
                       return this->StreamedUpdateTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::todo::UpdateTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::UpdateTaskRequest,::todo::Task>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ToggleTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ToggleTaskState() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::ToggleTaskStateRequest, ::todo::Task>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::ToggleTaskStateRequest, ::todo::Task>* streamer) {
                       return this->StreamedToggleTaskState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ToggleTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ToggleTaskState(::grpc::ServerContext* /*context*/, const ::todo::ToggleTaskStateRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedToggleTaskState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::ToggleTaskStateRequest,::todo::Task>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveTask() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::MoveTaskRequest, ::todo::Task>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::MoveTaskRequest, ::todo::Task>* streamer) {
                       return this->StreamedMoveTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveTask(::grpc::ServerContext* /*context*/, const ::todo::MoveTaskRequest* /*request*/, ::todo::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::MoveTaskRequest,::todo::Task>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteColumn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteColumn() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::ColumnIdRequest, ::todo::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::ColumnIdRequest, ::todo::Empty>* streamer) {
                       return this->StreamedDeleteColumn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteColumn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteColumn(::grpc::ServerContext* /*context*/, const ::todo::ColumnIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteColumn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::ColumnIdRequest,::todo::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTask() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::TaskIdRequest, ::todo::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::TaskIdRequest, ::todo::Empty>* streamer) {
                       return this->StreamedDeleteTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::todo::TaskIdRequest* /*request*/, ::todo::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::TaskIdRequest,::todo::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddColumn<WithStreamedUnaryMethod_RenameColumn<WithStreamedUnaryMethod_GetBoard<WithStreamedUnaryMethod_AddTaskToColumn<WithStreamedUnaryMethod_UpdateTask<WithStreamedUnaryMethod_ToggleTaskState<WithStreamedUnaryMethod_MoveTask<WithStreamedUnaryMethod_DeleteColumn<WithStreamedUnaryMethod_DeleteTask<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Sync() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::todo::Empty, ::todo::Board>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::todo::Empty, ::todo::Board>* streamer) {
                       return this->StreamedSync(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::todo::Empty* /*request*/, ::grpc::ServerWriter< ::todo::Board>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSync(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::todo::Empty,::todo::Board>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Sync<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddColumn<WithStreamedUnaryMethod_RenameColumn<WithStreamedUnaryMethod_GetBoard<WithStreamedUnaryMethod_AddTaskToColumn<WithStreamedUnaryMethod_UpdateTask<WithStreamedUnaryMethod_ToggleTaskState<WithStreamedUnaryMethod_MoveTask<WithSplitStreamingMethod_Sync<WithStreamedUnaryMethod_DeleteColumn<WithStreamedUnaryMethod_DeleteTask<Service > > > > > > > > > > StreamedService;
};

}  // namespace todo


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_todo_2eproto__INCLUDED
